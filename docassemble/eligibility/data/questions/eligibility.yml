---
metadata:
  title: Qualify for Legal Help
  short title: Legal Help
  tab title: Qualify for Legal Help - Instant Attorney
  comment: Programmatic qualification for legal services on Instant Attorney
---
modules:
  - docassemble.base.util
  - docassemble.base.functions
  - .eligibility
---
include:
  - direct.yml
---
mandatory: True
code: |
  url = get_config("exitpage")

  org_slug = url_args.get("org_slug")
  service_slug = url_args.get("service_slug")

  if org_slug and service_slug:
    service = get_service(org_slug, service_slug)
  else:
    service = None

  if service and service.get("name"):
    set_parts(
      title="Qualify for " + service.get("name"),
      short=service.get("name"),
      tab="Qualify for " + service.get("name") + " - Instant Attorney"
    )

  eligibility_id = url_args.get("eligibility_id")
  if not eligibility_id:
    qualify = -1
  else:
    eligibility_code = get_eligibility_code(eligibility_id)

  if ((not isinstance(qualify, int) and not isinstance(qualify, float))
    or qualify < 0 or qualify > 1):
    qualification = "Your qualification can not be determined."
  elif qualify == 0:
    qualification = "You do not qualify."
  elif qualify < .25:
    qualification = "You probably do not qualify."
  elif qualify < .5:
    qualification = "You may qualify."
  elif qualify < .75:
    qualification = "You probably qualify."
  elif qualify < 1:
    qualification = "You likely qualify!"
  elif qualify == 1:
    qualification = "You definitely qualify!"

  if apply and service and service.get("url"):
    exit_url = service.get("url")
  elif org_slug and service_slug:
    exit_url = (
      url + "/reviews/" + str(org_slug) + "/service/" + str(service_slug)
    )
  else:
    exit_url = url

  command("exit_logout", url=exit_url)
comment: |
  The Eligility Engine interview must be started with the URL argument:
  `eligibility_id`
  Otherwise, it will automatically return a qualification code of -1.
  
  There are also two optional (but highly recomended) URL arguments:
  `org_slug`
  `service_slug`
  These are the slugs for the Organization providing the service
  and the Service itself on Instant Attorney.
 
  For more details on URL arguments in docassemble, please see the documentation:
  https://docassemble.org/docs/special.html#url_args
---
code: |
  exec (eligibility_code)
  qualify = qualify()
comment: |
  Run the Eligibility code fetched from Instant Attorney.
  
  The default Eligibility code looks like this:
  # Eligibility Engine
  def qualify():
    return 1
  
  There may be more than one fuction, but there must be
  a `qualify()` function defined and this will acts as
  the "main" for your Eligibility code.

  The expected return value is an integer.
  If your code is able to make a determination of eligibility,
  it should return a value between 0 and 1 both inclusive using fuzzy logic:
  https://en.wikipedia.org/wiki/Fuzzy_logic

  For whatever reason the function can not make a determination,
  it should return -1. All other retrun values will be treated as a -1.
---
question: |
  ${ qualification }
subquestion: |
  Would you${ " still " if qualify < .5 else " " }like
  to apply for
  ${ (service.get("name")
     if service and service.get("name")
     else "this service")
  }${ (" by " + service.get("organization").get("name")
      if service and service.get("organization")
      and service.get("organization").get("name")
      else "")
  }?
buttons:
  - Apply Now:
      code: |
        apply = True
  - Back to Listing:
      code: |
        apply = False
comment: |
  This is functionally the exit block for this interview.
  If the user selects "Apply Now", then the interview will
  attempt to redirect the user to the URL for the Resource
  from Instant Attorney.

  Or if the user chooses "Back to Listing", the interview will
  attempt to redirect the user to the Resource listing
  on Instant Attorney.
---
